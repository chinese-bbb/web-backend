"""empty message

Revision ID: 2460d0e4ce75
Revises: 
Create Date: 2019-08-29 00:22:10.081127

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils


# revision identifiers, used by Alembic.
revision = '2460d0e4ce75'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fuzzy_search_raw',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('keyword', sa.String(length=140), nullable=True),
    sa.Column('storage', sa.Text(), nullable=True),
    sa.Column('pageIndex', sa.Integer(), nullable=True),
    sa.Column('totalPage', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_fuzzy_search_raw'))
    )
    op.create_table('merchant_query_raw',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('keyword', sa.String(length=140), nullable=True),
    sa.Column('storage', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_merchant_query_raw'))
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('password_hash', sa.String(length=128), nullable=True),
    sa.Column('account_active', sa.Boolean(), nullable=True),
    sa.Column('if_verified', sa.Boolean(), nullable=True),
    sa.Column('minority', sa.String(length=120), nullable=True),
    sa.Column('real_name', sa.String(length=120), nullable=True),
    sa.Column('registered_date', sa.String(length=120), nullable=True),
    sa.Column('sex', sa.Enum('male', 'female', 'other', name='enumgender'), nullable=False),
    sa.Column('first_name', sa.String(length=120), nullable=True),
    sa.Column('last_name', sa.String(length=120), nullable=False),
    sa.Column('is_founder', sa.Boolean(), nullable=True),
    sa.Column('urole', sa.String(length=140), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user'))
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('complaint',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('complaint_body', sa.Text(), nullable=True),
    sa.Column('expected_solution_body', sa.Text(), nullable=True),
    sa.Column('complain_type', sa.Enum('product_issue', 'fake_ad', 'customer_service', 'exchange_return', 'warranty', 'contract', 'shipping', 'infraction', 'other', name='enumcomplainttype'), nullable=True),
    sa.Column('complain_timestamp', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('if_negotiated_by_merchant', sa.Boolean(), nullable=True),
    sa.Column('negotiate_timestamp', sa.DateTime(), nullable=True),
    sa.Column('allow_public', sa.Boolean(), nullable=True),
    sa.Column('allow_contact_by_merchant', sa.Boolean(), nullable=True),
    sa.Column('allow_press', sa.Boolean(), nullable=True),
    sa.Column('item_price', sa.String(length=200), nullable=True),
    sa.Column('item_model', sa.String(length=200), nullable=True),
    sa.Column('trade_info', sa.String(length=1000), nullable=True),
    sa.Column('relatedProducts', sa.String(length=1000), nullable=True),
    sa.Column('purchase_timestamp', sa.DateTime(), nullable=True),
    sa.Column('invoice_files', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('evidence_files', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('merchant_id', sa.Integer(), nullable=True),
    sa.Column('complaint_status', sa.Enum('initialized', 'merchant_commented', 'customer_commented', 'unresolved', 'resolved', name='enumcomplaintstate'), nullable=True),
    sa.Column('audit_status', sa.Enum('auditing', 'approved', 'rejected', name='enumauditstate'), nullable=True),
    sa.ForeignKeyConstraint(['merchant_id'], ['merchant_query_raw.id'], name=op.f('fk_complaint_merchant_id_merchant_query_raw')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_complaint_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_complaint'))
    )
    op.create_table('comment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('text', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('complaint_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['complaint_id'], ['complaint.id'], name=op.f('fk_comment_complaint_id_complaint')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_comment_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_comment'))
    )
    op.create_index(op.f('ix_comment_complaint_id'), 'comment', ['complaint_id'], unique=False)
    op.create_index(op.f('ix_comment_timestamp'), 'comment', ['timestamp'], unique=False)
    op.create_index(op.f('ix_comment_user_id'), 'comment', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_comment_user_id'), table_name='comment')
    op.drop_index(op.f('ix_comment_timestamp'), table_name='comment')
    op.drop_index(op.f('ix_comment_complaint_id'), table_name='comment')
    op.drop_table('comment')
    op.drop_table('complaint')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    op.drop_table('merchant_query_raw')
    op.drop_table('fuzzy_search_raw')
    # ### end Alembic commands ###
